#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% DO NOT ALTER THIS PREAMBLE!!!
%
% This preamble is designed to ensure that the manual prints
% out as advertised. If you mess with this preamble,
% parts of the manual may not print out as expected.  If you
% have problems LaTeXing this file, please contact 
% the documentation team
% email: lyx-docs@lists.lyx.org

% the pages of the TOC are numbered roman
% and a PDF-bookmark for the TOC is added

\pagenumbering{roman}
\let\myTOC\tableofcontents
\renewcommand{\tableofcontents}{%
 \pdfbookmark[1]{\contentsname}{}
 \myTOC

 \pagenumbering{arabic}}

% extra space for tables
\newcommand{\extratablespace}[1]{\noalign{\vskip#1}}

\usepackage{listings}

\usepackage{color}

\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}
\definecolor{myorange}{RGB}{200,100,0}

\lstset{ 
  backgroundcolor=\color{white},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}; should come as last argument
  basicstyle=\scriptsize\ttfamily, % the size of the fonts that are used for the code
  breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
  breaklines=true,                 % sets automatic line breaking
  captionpos=b,                    % sets the caption-position to bottom
  commentstyle=\color{mygreen},    % comment style
  deletekeywords={...},            % if you want to delete keywords from the given language
  escapeinside={\%*}{*)},          % if you want to add LaTeX within your code
  extendedchars=true,              % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
  frame=leftline,   	           % adds a frame around the code
  inputencoding=utf8,
  keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
  keywordstyle=\color{blue},       % keyword style
  language=Java,                   % the language of the code
  morekeywords={*,...},            % if you want to add more keywords to the set
  numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
  numbersep=5pt,                   % how far the line-numbers are from the code
  numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
  rulecolor=\color{black},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
  showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
  showstringspaces=false,          % underline spaces within strings only
  showtabs=false,                  % show tabs within strings adding particular underscores
  stepnumber=1,                    % the step between two line-numbers. If it's 1, each line will be numbered
  stringstyle=\color{myorange},    % string literal style
  tabsize=2,	                   % sets default tabsize to 2 spaces
  title=\lstname                   % show the filename of files included with \lstinputlisting; also try caption instead of title
}
\usepackage[hyphenbreaks]{breakurl}
\end_preamble
\options bibliography=totoc,index=totoc,BCOR7.5mm,titlepage,captions=tableheading
\use_default_options false
\begin_modules
logicalmkup
theorems-ams
theorems-ams-extended
multicol
shapepar
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Linux Notes"
\pdf_author "Ladislav Sulak"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "linkcolor=black, citecolor=black, urlcolor=blue, filecolor=blue, pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\notefontcolor #0000ff
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 1
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 1
\math_indentation default
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict true
\end_header

\begin_body

\begin_layout Chapter
Design Patterns
\end_layout

\begin_layout Standard
They are a general repeatable solution to a commonly occurring problem in
 software design.
\end_layout

\begin_layout Itemize
A design pattern isn't a finished design that can be transformed directly
 into code.
 It is a description or template for how to solve a problem that can be
 used in many different situations.
\end_layout

\begin_layout Itemize
Design patterns can speed up the development process by providing tested,
 proven development paradigms.
 Effective software design requires considering issues that may not become
 visible until later in the implementation.
\end_layout

\begin_layout Itemize
Reusing design patterns helps to prevent subtle issues that can cause major
 problems and improves code readability for coders and architects familiar
 with the patterns.
\end_layout

\begin_layout Itemize
Originally there were 23 design patterns basic, language-independent design
 patterns.
 Now there are about 40.
\end_layout

\begin_layout Itemize
They are also about more abstract understanding of software.
 They also help to create well structured software in less time.
 They also offer a 
\begin_inset Quotes eld
\end_inset

shared language
\begin_inset Quotes erd
\end_inset

 to communicate.
\end_layout

\begin_layout Itemize
Actually a lot of design patterns are implemented in programming language.
 So don't over-complicate things and don't use something that is built-in!
 For example, 
\emph on
Iterator
\emph default
 pattern.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Creational Patterns
\end_layout

\begin_layout Standard
These design patterns are all about class instantiation.
 This pattern can be further divided into class-creation patterns and object-cre
ational patterns.
 While class-creation patterns use inheritance effectively in the instantiation
 process, object-creation patterns use delegation effectively to get the
 job done.
\end_layout

\begin_layout Paragraph*
Singleton
\end_layout

\begin_layout Itemize
The experience shows that most singletons really do more harm than good.
 A lot of people never uses singleton, it is even considered as a code smell.
 It is 
\begin_inset Quotes eld
\end_inset

global
\begin_inset Quotes erd
\end_inset

, anyone can modify that without even knowing it - you lost control.
 Also, having just 1 instance in growing application can be misleading.
 Maybe in the future, there will be more instances.
 Also, in multi-threaded application, singleton can be dangerous.
\end_layout

\begin_layout Itemize
The single-instance requirement is often imagined.
 In many cases, itâ€™s pure speculation that no additional instances will
 be needed in the future.
 
\end_layout

\begin_layout Itemize
Singletons cause implicit dependencies between conceptually independent
 units of code.
 This is problematic both because they are hidden and because they introduce
 unnecessary coupling between units.
 
\end_layout

\begin_layout Itemize
Singletons also carry implicit persistent state, which hinders unit testing.
 Unit testing depends on tests being independent of one another, so the
 tests can be run in any order and the program can be set to a known state
 before the execution of every unit test.
 Once you have introduced singletons with mutable state, this may be hard
 to achieve.
 In addition, such globally accessible persistent state makes it harder
 to reason about the code, especially in a multi-threaded environment.
 
\end_layout

\begin_layout Itemize
Multi-threading introduces further pitfalls to the singleton pattern.
 As straightforward locking on access is not very efficient, the so-called
 double-checked locking pattern (DCLP) has gained in popularity.
 Unfortunately, this may be a further form of fatal attraction.
 It turns out that in many languages, DCLP is not thread-safe and, even
 where it is, there are still opportunities to get it subtly wrong.
 
\end_layout

\begin_layout Itemize
The cleanup of singletons may present also a challenge.
\end_layout

\begin_layout Itemize
Some of these shortcomings can be overcome by introducing additional mechanisms.
 However, this comes at the cost of additional complexity in code that could
 have been avoided by choosing an alternative design.
 Therefore, restrict your use of the Singleton pattern to the classes that
 truly must never be instantiated more than once.
 Donâ€™t use a singletonâ€™s global access point from arbitrary code.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename fig/design_patterns/factory_method_and_abstract_factory.jpg
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Factory method and Abstract Factory design patterns.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Structural Patterns
\end_layout

\begin_layout Standard
These design patterns are all about class and object composition.
 Structural class-creation patterns use inheritance to compose interfaces.
 Structural object-patterns define ways to compose objects to obtain new
 functionality.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename fig/design_patterns/adapter_and_facade.jpg
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Adapter and Facade design patterns.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename fig/design_patterns/decorator.jpg
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Decorator design pattern.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename fig/design_patterns/proxy_and_bridge.jpg
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Proxy and Bridge design patterns.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Behavioral Patterns
\end_layout

\begin_layout Standard
These design patterns are all about class's objects communication.
 Behavioral patterns are those patterns that are most specifically concerned
 with communication between objects.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename fig/design_patterns/command.jpg
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Command design pattern.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename fig/design_patterns/iterator.jpg
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Iterator design pattern.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename fig/design_patterns/state.jpg
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
State design pattern.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename fig/design_patterns/null_object.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Null Object design pattern.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename fig/design_patterns/template.jpg
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Template Method design pattern.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename fig/design_patterns/strategy_and_observer.jpg
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Strategy and Observer design pattern.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
