#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% DO NOT ALTER THIS PREAMBLE!!!
%
% This preamble is designed to ensure that the manual prints
% out as advertised. If you mess with this preamble,
% parts of the manual may not print out as expected.  If you
% have problems LaTeXing this file, please contact 
% the documentation team
% email: lyx-docs@lists.lyx.org

% the pages of the TOC are numbered roman
% and a PDF-bookmark for the TOC is added

\pagenumbering{roman}
\let\myTOC\tableofcontents
\renewcommand{\tableofcontents}{%
 \pdfbookmark[1]{\contentsname}{}
 \myTOC

 \pagenumbering{arabic}}

% extra space for tables
\newcommand{\extratablespace}[1]{\noalign{\vskip#1}}
\end_preamble
\options bibliography=totoc,index=totoc,BCOR7.5mm,titlepage,captions=tableheading
\use_default_options false
\begin_modules
logicalmkup
theorems-ams
theorems-ams-extended
multicol
shapepar
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Linux Notes"
\pdf_author "Ladislav Sulak"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "linkcolor=black, citecolor=black, urlcolor=blue, filecolor=blue, pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\notefontcolor #0000ff
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 1
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 1
\math_indentation default
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict true
\end_header

\begin_body

\begin_layout Chapter
Testing
\end_layout

\begin_layout Itemize

\series bold
Tests are as important to the health of a project as the production code
 is.
 
\series default
Perhaps they are even more important, because tests preserve and enhance
 the flexibility, maintainability, and reusability of the production code.
 So keep your tests constantly clean.
 Work to make them expressive and succinct.
 Invent testing APIs that act as domain-specific language that helps you
 write the tests.
 If you let the tests rot, then your code will rot too.
 Keep your tests clean.
\end_layout

\begin_layout Itemize
What makes a clean test? Three things.
 Readability, readability, and readability.
 Readability is perhaps even more important in unit tests than it is in
 production code.
 What makes tests readable? The same thing that makes all code readable:
 clarity, simplicity, and density of expression.
 In a test you want to say a lot with as few expressions as possible.
\end_layout

\begin_layout Itemize
There are multiple types of testing and for each one there must be clean
 separation between them.
 Each category also requires different setup and process how to tests.
\end_layout

\begin_layout Itemize
Besides the following 3 types, there should be also 
\series bold
continuous code inspection
\series default
 - static code analyzers like pylint (
\series bold
or even better - coala
\series default
, which has multiple inspection tools integrated and usable as docker image
 - 90+ analyzers including python, bash, json, yaml, ...); each commit is analyzed
 automatically with that.
 These are cheap and fast checks.
\end_layout

\begin_layout Itemize
More tests devs produce, the better will CI works, the easier CD.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

It is important to note that testing is not a phase, it’s an activity and
 that testing starts from the very beginning of the development process,
 right from when the user stories are written.
\begin_inset Quotes erd
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
footnote{
\backslash
url{https://www.testingexcellence.com/how-to-setup-a-qa-function-from-scratch-for-
agile-projects/}}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Tests should be easily executable, writable, readable, automation friendly,
 isolated, and consistent across a project (the same structure and framework).
 They should be as close to developers as possible – devs let to run any
 test they need in short time as well as they must get feedback as soon
 as possible.
\end_layout

\begin_layout Itemize
The 
\emph on
build-operate-check
\emph default
 pattern defines the structure of the tests.
 Each of the tests is clearly split into 3 parts.
 The first part builds up the test data, the second part operates on that
 test data, and the third part checks that the operation yielded the expected
 results.
\end_layout

\begin_layout Itemize
Golden Rule of API Design fits in: It’s not enough to write tests for an
 API you develop; you have to write unit tests for code that uses your API.
\end_layout

\begin_layout Itemize
Tests are also independently deployable.
 In fact, most of the time they are deployed in test systems, rather than
 in production systems.
 Tests are the most isolated system component.
\end_layout

\begin_layout Itemize
QA - Quality Assurance, QE - Quality Engineer(ing).
\end_layout

\begin_deeper
\begin_layout Itemize
Developers should be responsible for testing their own code by writing unittests
 and easier functional tests.
\end_layout

\begin_layout Itemize
QEs must know about features, devs must know which parts of code are QEs
 suffering.
\end_layout

\begin_layout Itemize
QEs must tightly collaborate with developers and vice versa and should be
 rather mixed together in 1 room).
\end_layout

\begin_layout Itemize

\series bold
QE responsibilities
\end_layout

\begin_deeper
\begin_layout Itemize
Thinking about project from customer POW (high level design review).
\end_layout

\begin_layout Itemize
Testing product from customer POW – QA doesn't care about implementation
 details, but functionality.
\end_layout

\begin_layout Itemize
Maintain internal test frameworks (with developers).
\end_layout

\begin_layout Itemize
Maintain CI automation, tools (with developers).
\end_layout

\begin_layout Itemize
RC testing, testing deployment, upgrades.
\end_layout

\begin_layout Itemize
Tests suites: system tests, complex integration tests.
 Also (if needed) additional testing: performance, security, ...
\end_layout

\begin_layout Itemize
Sharing knowledge about proper testing with developers.
\end_layout

\begin_layout Itemize

\series bold
BUT NOT
\series default
: unit testing, designing or coding features, bug-fixing product, code review,
 simple integration tests, knowledge of implementation details.
\end_layout

\end_deeper
\end_deeper
\begin_layout Paragraph*
Test-Driven-Development
\end_layout

\begin_layout Itemize
There are 3 laws of TDD:
\end_layout

\begin_deeper
\begin_layout Itemize
First Law - You may not write production code until you have written a failing
 unit test.
\end_layout

\begin_layout Itemize
Second Law - You may not write more of a unit test than is sufficient to
 fail, and not compiling is failing.
\end_layout

\begin_layout Itemize
Third Law - You may not write more production code than is sufficient to
 pass the currently failing test.
 This law is also known as "fake it 'til you make it".
 It is a seemingly idiotic practice with massive benefits.
 See 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{https://www.youtube.com/watch?v=PhiXo5CWjYU}
\end_layout

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
It helps you achieve and maintain flow.
 TDD helps you to achieve initial momentum and not getting stack thinking
 about the details of perfect implementation.
\end_layout

\begin_layout Itemize
It helps you increase test coverage.
\end_layout

\begin_layout Itemize
You might incrementally move toward better algorithms.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
These 3 laws lock you into a cycle that is perhaps 30 seconds long.
 The tests and the production code are written together, with the tests
 just a few seconds ahead of the production code.
 If we work this way, we will write dozens of tests every day, hundreds
 of tests every month, and thousands of tests every year.
 If we work this way, those tests will cover virtually all of our production
 code.
 
\end_layout

\begin_layout Itemize
TDD cycle has 3 parts - red, green, refactor.
 The first thing to do is to write the simplest possible implementation
 (and not just one silly use case).
\end_layout

\begin_layout Itemize
You begin by writing a small portion of a unit test.
 But within a few seconds you must mention the name of some class or function
 you have not written yet, thereby causing the unit test to fail to compile.
 So you must write production code that makes the test compile.
 But you can’t write any more than that, so you start writing more unit
 test code.
\end_layout

\begin_layout Itemize
One of the most powerful benefits of TDD is that when you have a suite of
 tests that you trust, then you lose all fear of making changes.
 When you see bad code, you simply clean it on the spot.
\end_layout

\begin_layout Itemize
The tests you write after the fact are defense.
 The tests you write first are offense.
 After-the-fact tests are written by someone who is already vested in the
 code and already knows how the problem was solved.
 There’s just no way those tests can be anywhere near as incisive as tests
 written first.
\end_layout

\begin_layout Itemize
TDD is a discipline that enhances certainty, courage, defect reduction,
 documentation, and design.
 
\end_layout

\begin_layout Itemize
There are times when following the 3 laws is simply impractical or inappropriate.
 These situations are rare, but they exist.

\series bold
 No professional developer should ever follow a discipline when that discipline
 does more harm than good.
\end_layout

\begin_layout Paragraph*
F.I.R.S.T.
\end_layout

\begin_layout Standard
Clean tests follow these 5 rules:
\end_layout

\begin_layout Itemize

\series bold
Fast
\series default
.
 Tests should be fast.
 They should run quickly.
 When tests run slow, you won’t want to run them frequently.
 If you don’t run them frequently, you won’t find problems early enough
 to fix them easily.
 You won’t feel as free to clean up the code.
 Eventually the code will begin to rot.
\end_layout

\begin_layout Itemize

\series bold
Independent
\series default
.
 Tests should not depend on each other.
 One test should not set up the conditions for the next test.
 You should be able to run each test independently and run the tests in
 any order you like.
\end_layout

\begin_layout Itemize

\series bold
Repeatable
\series default
.
 If your tests aren't repeatable in any environment, then you’ll always
 have an excuse for why they fail.
 You’ll also find yourself unable to run the tests when the environment
 isn't available
\end_layout

\begin_layout Itemize

\series bold
Self-validating
\series default
.
 The tests should have a boolean output.
 Either they pass or fail.
 You should not have to read through a log file to tell whether the tests
 pass.
 You should not have to manually compare two different text files to see
 whether the tests pass.
 If the tests aren't self-validating, then failure can become subjective
 and running the tests can require a long manual evaluation.
\end_layout

\begin_layout Itemize

\series bold
Timely
\series default
.
 The tests need to be written in a timely fashion.
 Unit tests should be written just before the production code that makes
 them pass.
 If you write tests after the production code, then you may find the production
 code to be hard to test.
 You may decide that some production code is too hard to test.
 You may not design the production code to be testable.
\end_layout

\begin_layout Paragraph*
Test Hierarchy
\end_layout

\begin_layout Standard
More details about each type of tests is written in the following sections.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename fig/test_automation_pyramid.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Test hierarchy including a coverage.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Unit Tests
\end_layout

\begin_layout Itemize
Service is not running, parts of code are tested (using mocking data, no
 database, I/O, or network connections).
\end_layout

\begin_layout Itemize
Testing of functions, methods, objects, classes => units.
 
\end_layout

\begin_layout Itemize
Should be the fastest test suite.
\end_layout

\begin_layout Itemize
Run by developers during development of code.
\end_layout

\begin_layout Itemize
Should have the biggest coverage.
\end_layout

\begin_layout Itemize
It is unit tests that keep our code flexible, maintainable, and reusable.
 The reason is simple.
 If you have tests, you do not fear making changes to the code! Without
 tests every change is a possible bug.
 No matter how flexible your architecture is, no matter how nicely partitioned
 your design, without tests you will be reluctant to make changes because
 of the fear that you will introduce undetected bugs.
 Tests enable change.
\end_layout

\begin_layout Itemize
At the bottom of the test pyramid (figure above) are the unit tests.
 These tests are written by programmers, for programmers, in the programming
 language of the system.
 The intent of these tests is to specify the system at the lowest level.
 Developers write these tests before writing production code as a way to
 specify what they are about to write.
 
\end_layout

\begin_layout Itemize
Unit tests provide as close to 100% coverage as is practical.
 Generally this number should be somewhere in the 90s.
\end_layout

\begin_layout Section
Component Tests
\end_layout

\begin_layout Itemize
These are some of the acceptance tests.
 Generally they are written against individual components of the system.
 The components of the system encapsulate the business rules, so the tests
 for those components are the acceptance tests for those business rules.
\end_layout

\begin_layout Itemize
A component test wraps a component.
 It passes input data into the component and gathers output data from it.
 It tests that the output matches the input.
 Any other system components are decoupled from the test using appropriate
 mocking and test-doubling techniques.
\end_layout

\begin_layout Itemize
Component tests are written by QA with assistance from development.
 
\end_layout

\begin_layout Itemize
Component tests cover roughly half the system.
 They are directed more towards happy-path situations and very obvious corner,
 boundary, and alternate-path cases.
 The vast majority of unhappy-path cases are covered by unit tests and are
 meaningless at the level of component tests.
\end_layout

\begin_layout Section
Integration Tests
\end_layout

\begin_layout Itemize
The whole set of services is running and being tested how cooperates.
 Additional services may be required, such as database or network.
\end_layout

\begin_layout Itemize
Should be run after successful unit testing.
 Usually needs more resources than unit testing.
\end_layout

\begin_layout Itemize
Docker may improve setup of integration tests: 
\end_layout

\begin_deeper
\begin_layout Itemize
Isolated test, multiple isolated tests can be run in parallel.
\end_layout

\begin_layout Itemize
Pre-configured docker images with services/DB.
\end_layout

\begin_layout Itemize
Docker-compose: allows running multiple containers in one test setup.
\end_layout

\begin_layout Itemize
Just provide test data and mount container to your git repo.
\end_layout

\begin_layout Itemize
The same containers can be used for CI/QA/developers (no duplication).
\end_layout

\begin_layout Itemize
With all mentioned above: it should be possible to run integration tests
 just by 1 command, no extra effort from devel side.
\end_layout

\end_deeper
\begin_layout Itemize
These tests only have meaning for larger systems that have many components.
 These tests assemble groups of components and test how well they communicate
 with each other.
 The other components of the system are decoupled as usual with appropriate
 mocks and test-doubles.
\end_layout

\begin_layout Itemize
They do not test business rules.
 Rather, they test how well the assembly of components dances together.
 They are plumbing tests that make sure that the components are properly
 connected and can clearly communicate with each other.
\end_layout

\begin_layout Itemize
Integration tests are typically written by the system architects, or lead
 designers, of the system.
 The tests ensure that the architectural structure of the system is sound.
 It is at this level that we might see performance and throughput tests.
\end_layout

\begin_layout Itemize
Integration tests are typically written in the same language and environment
 as component tests.
 They are typically not executed as part of the CI suite, because they often
 have longer run-times.
 Instead, these tests are run periodically (nightly, weekly, etc.) as deemed
 necessary by their authors.
\end_layout

\begin_layout Itemize
Once this stage is done, usually 
\emph on
Smoke Testing
\emph default
 is performed.
 These are very short tests (either unit of functional tests), that will
 determine whether a given system (or a component) is ready for the next
 stage of testing.
 If all parts of the application or component are implemented and runnable.
 They focus only on the main functionality, that should be pretty much stable.
 They are mostly automatized.
 The next phase once this is successful, is
\emph on
 System Testing
\emph default
.
\end_layout

\begin_layout Itemize
Difference between unit and integration tests
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
footnote{
\backslash
url{https://www.youtube.com/watch?v=uCxL7NGEohI}}
\end_layout

\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
Integrating with anything non-deterministic means your test must be considered
 as integration test.
\end_layout

\begin_layout Itemize
Integrating with deterministic parts of your language (such as standard
 library) does not necessarily make your test an integration test.
\end_layout

\begin_layout Itemize
Integrating with any 3rd party code makes your test an integration test.
 (!)
\end_layout

\begin_layout Itemize
Integrating with any other class/module that you own makes your test an
 integration test.
\end_layout

\begin_layout Standard
If you want to turn your integration test into unit test, maybe a solution
 is to use dependency injection.
\end_layout

\end_deeper
\begin_layout Section
System Tests
\end_layout

\begin_layout Itemize
Service is running and is tested as 1 piece.
 These tests should test only 1 service at once.
\end_layout

\begin_layout Itemize
Testing the product itself, testing how all subsystems cooperate (like productio
n deployment).
\end_layout

\begin_layout Itemize
This is the final phase of testing, the most resources are spent here.
\end_layout

\begin_layout Itemize
These are automated tests that execute against the entire integrated system.
 They are the ultimate integration tests.
 They do not test business rules directly.
 Rather, they test that the system has been wired together correctly and
 its parts inter-operate according to plan.
 We would expect to see throughput and performance tests in this suite.
\end_layout

\begin_layout Itemize
These tests are written by the system architects and technical leads.
 Typically they are written in the same language and environment as integration
 tests for the UI.
 They are executed relatively infrequently depending on their duration,
 but the more frequently the better.
\end_layout

\begin_layout Itemize
System tests cover perhaps 10% of the system.
 This is because their intent is not to ensure correct system behavior,
 but correct system construction.
 The correct behavior of the underlying code and components have already
 been tested in the lower layers of the pyramid.
\end_layout

\begin_layout Section
Exploratory Tests
\end_layout

\begin_layout Itemize
This is where humans put their hands on the keyboards and their eyes on
 the screens.
 These tests are not automated, nor are they scripted.
 The intent of these tests is to explore the system for unexpected behaviors
 while confirming expected behaviors.
\end_layout

\begin_layout Itemize
The goal is not coverage.
 We are not going to prove out every business rule and every execution pathway
 with these tests.
 Rather, the goal is to ensure that the system behaves well under human
 operation and to creatively find as many “peculiarities” as possible.
 
\end_layout

\begin_layout Itemize
It is possible to invest day or two of “bug hunting” in which as many people
 as possible, including managers, secretaries, programmers, testers, and
 tech writers, “bang” on the system to see if they can make it break.
\end_layout

\begin_layout Itemize
Exploratory testing is often thought of as a black box testing technique.
 It may cover also a quick smoke testing.
\end_layout

\begin_layout Section
Specialized Tests
\end_layout

\begin_layout Standard
These tests are not always implemented.
 Here belong acceptance tests, functional tests, and non-functional tests.
\end_layout

\begin_layout Paragraph*
Acceptance Tests
\end_layout

\begin_layout Standard
These tests are written by a collaboration of the stakeholders and the programme
rs in order to define when a requirement is done.
\end_layout

\begin_layout Itemize
The word "done" means all code written, all tests pass, QA and the stakeholders
 have accepted.
 Done.
 But how can you get this level of done-ness and still make quick progress
 from iteration to iteration? You create a set of automated tests that,
 when they pass, meet all of the above criteria! When the acceptance tests
 for your feature pass, you are done.
\end_layout

\begin_layout Itemize
The purpose of acceptance tests is communication, clarity, and precision.
 By agreeing to them, the developers, stakeholders, and testers all understand
 what the plan for the system behavior is.
 Achieving this kind of clarity is the responsibility of all parties.
 
\end_layout

\begin_layout Itemize
Acceptance tests must always be automated (because of cost).
 Don’t look at these tests as extra work.
 Look at them as massive time and money savers.
 These tests will prevent you from implementing the wrong system and will
 allow you to know when you are done.
\end_layout

\begin_layout Itemize
In an ideal world, the stakeholders and QA would collaborate to write these
 tests, and developers would review them for consistency.
 In the real world, stakeholders seldom have the time or inclination to
 dive into the required level of detail.
 So they often delegate the responsibility to business analysts, QA, or
 even developers.
 If it turns out that developers must write these tests, then take care
 that the developer who writes the test is not the same as the developer
 who implements the tested feature.
\end_layout

\begin_layout Itemize
Unit tests dig into the guts of the system making calls to methods in particular
 classes.
 Acceptance tests invoke the system much farther out, at the API or sometimes
 even UI level.
 So the execution pathways that these tests take are very different.
\end_layout

\begin_layout Itemize
Keep the GUI tests to a minimum.
 They are fragile, because the GUI is volatile.
 The more GUI tests you have the less likely you are to keep them.
 
\end_layout

\begin_layout Itemize
The only way Robert C.
 Martin knows of to effectively eliminate communication errors between programme
rs and stakeholders is to write automated acceptance tests.
\end_layout

\begin_layout Itemize
It should be QA’s role to work with business to create the automated acceptance
 tests that become the true specification and requirements document for
 the system.
 Iteration by iteration they gather the requirements from business and translate
 them into tests that describe to developers how the system should behave.
\end_layout

\begin_layout Paragraph*
Functional Tests
\end_layout

\begin_layout Itemize
These are a type of black-box testing that bases its test cases on the specifica
tions of the software component under test.
 Functions are tested by feeding them input and examining the output, and
 internal program structure is rarely considered (unlike white-box testing).
\end_layout

\begin_layout Itemize
Functional testing usually describes what the system does.
 Functional testing does not imply that you are testing a function (method)
 of your module or class.
 Functional testing tests a slice of functionality of the whole system.
\end_layout

\begin_layout Itemize
Functional testing differs from system testing in that functional testing
 "verifies a program by checking it against ...
 design document(s) or specification(s)", while system testing "validate[s]
 a program by checking it against the published user or system requirements".
\end_layout

\begin_layout Itemize
Functional testing has many types:
\end_layout

\begin_deeper
\begin_layout Itemize

\bar under
Smoke testing
\bar default
 (see above).
\end_layout

\begin_layout Itemize

\bar under
Sanity testing
\bar default
 - a sanity test or sanity check is a basic test to quickly evaluate whether
 a claim or the result of a calculation can possibly be true.
 It is a simple check to see if the produced material is rational.
 The point of a sanity test is to rule out certain classes of obviously
 false results, not to catch every possible error.
 
\end_layout

\begin_layout Itemize

\bar under
Regression testing
\bar default
 - this is re-running functional and non-functional tests to ensure that
 previously developed and tested software still performs after a change.
 
\end_layout

\begin_layout Itemize

\bar under
Usability testing
\bar default
 - this is a technique used in user-centered interaction design to evaluate
 a product by testing it on users.
\end_layout

\end_deeper
\begin_layout Paragraph*
Non-Functional Tests
\end_layout

\begin_layout Standard
This is the testing of a software application or system for its non-functional
 requirements: the way a system operates, rather than specific behaviors
 of that system.
 It can be for example:
\end_layout

\begin_layout Itemize
Documentation testing
\end_layout

\begin_layout Itemize
Load testing
\end_layout

\begin_layout Itemize
Performance testing
\end_layout

\begin_layout Itemize
Recovery testing
\end_layout

\begin_layout Itemize
Security testing
\end_layout

\begin_layout Itemize
Scalability testing
\end_layout

\begin_layout Itemize
Stress testing
\end_layout

\end_body
\end_document
